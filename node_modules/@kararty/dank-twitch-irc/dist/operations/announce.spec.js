"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const sinon = require("sinon");
const errors_1 = require("../client/errors");
const helpers_spec_1 = require("../helpers.spec");
const announce_1 = require("./announce");
describe("./operations/announce", function () {
    describe("AnnouncementError", function () {
        it("should not be instanceof ConnectionError", function () {
            chai_1.assert.notInstanceOf(new announce_1.AnnouncementError("notkarar", "test"), errors_1.ConnectionError);
        });
        it("should not be instanceof ClientError", function () {
            chai_1.assert.notInstanceOf(new announce_1.AnnouncementError("notkarar", "test"), errors_1.ClientError);
        });
    });
    describe("#announce()", function () {
        it("should send the correct wire command", async function () {
            sinon.useFakeTimers();
            const { client, data } = (0, helpers_spec_1.fakeConnection)();
            (0, announce_1.announce)(client, "notkarar", "test");
            chai_1.assert.deepStrictEqual(data, ["PRIVMSG #notkarar :/announce test\r\n"]);
        });
        it('should resolve on incoming msg_id="announcement"', async function () {
            const { client, clientError, emitAndEnd } = (0, helpers_spec_1.fakeConnection)();
            const promise = (0, announce_1.announce)(client, "notkarar", "test");
            const userstateResponse = "@badge-info=;badges=broadcaster/1,glitchcon2020/1;color=#666666;display-name=NotKarar;emotes=;flags=;id=9cfac0bf-94f6-4ed8-9fca-56cef9c2edc8;login=notkarar;mod=0;" +
                "msg-id=announcement;room-id=89954186;subscriber=0;system-msg=;tmi-sent-ts=1651320921207;user-id=89954186;user-type= :tmi.twitch.tv USERNOTICE #notkarar :test";
            emitAndEnd(userstateResponse);
            const response = await promise;
            chai_1.assert.strictEqual(response.rawSource, userstateResponse);
            await clientError;
        });
        it("should reject on incoming no_permission", async function () {
            const { client, emitAndEnd, clientError } = (0, helpers_spec_1.fakeConnection)();
            const promise = (0, announce_1.announce)(client, "notkarar", "test");
            const response = "@msg-id=no_permission :tmi.twitch.tv NOTICE #notkarar " +
                ":You don't have permission to perform that action.";
            emitAndEnd(response);
            await (0, helpers_spec_1.assertErrorChain)([promise, clientError], announce_1.AnnouncementError, "Failed to announce [#notkarar]: test: Bad response message: " +
                response, errors_1.MessageError, "Bad response message: " + response);
        });
    });
});
//# sourceMappingURL=announce.spec.js.map