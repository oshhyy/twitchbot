"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const sinon = require("sinon");
const errors_1 = require("../client/errors");
const helpers_spec_1 = require("../helpers.spec");
const validation_error_1 = require("../validation/validation-error");
const deleteMsg_1 = require("./deleteMsg");
describe("./operations/deleteMsg", function () {
    describe("MessageDeleteError", function () {
        it("should not be instanceof ConnectionError", function () {
            chai_1.assert.notInstanceOf(new deleteMsg_1.MessageDeleteError("amazeful", "b34ccfc7-4977-403a-8a94-33c6bac34fb8"), errors_1.ConnectionError);
        });
        it("should not be instanceof ClientError", function () {
            chai_1.assert.notInstanceOf(new deleteMsg_1.MessageDeleteError("amazeful", "b34ccfc7-4977-403a-8a94-33c6bac34fb8"), errors_1.ClientError);
        });
    });
    describe("#deleteMsg()", function () {
        it("should send the correct wire command", async function () {
            sinon.useFakeTimers();
            const { client, data } = (0, helpers_spec_1.fakeConnection)();
            (0, deleteMsg_1.deleteMsg)(client, "amazeful", "b34ccfc7-4977-403a-8a94-33c6bac34fb8");
            chai_1.assert.deepStrictEqual(data, [
                "PRIVMSG #amazeful :/delete b34ccfc7-4977-403a-8a94-33c6bac34fb8\r\n",
            ]);
        });
        it("should validate the given channel name", async function () {
            const { client, clientError, end, data } = (0, helpers_spec_1.fakeConnection)();
            const promise = (0, deleteMsg_1.deleteMsg)(client, "AMAZEFUL", "b34ccfc7-4977-403a-8a94-33c6bac34fb8");
            await (0, helpers_spec_1.assertErrorChain)(promise, validation_error_1.ValidationError, 'Channel name "AMAZEFUL" is invalid/malformed');
            end();
            await clientError;
            chai_1.assert.isEmpty(data);
        });
        it("should resolve on incoming delete_message_success", async function () {
            const { client, emitAndEnd, clientError } = (0, helpers_spec_1.fakeConnection)();
            const promise = (0, deleteMsg_1.deleteMsg)(client, "amazeful", "b34ccfc7-4977-403a-8a94-33c6bac34fb8");
            emitAndEnd("@msg-id=delete_message_success :tmi.twitch.tv NOTICE #amazeful :amazeful message was deleted.");
            await promise;
            await clientError;
        });
        it("should reject on incoming no_permission", async function () {
            const { client, emitAndEnd, clientError } = (0, helpers_spec_1.fakeConnection)();
            const promise = (0, deleteMsg_1.deleteMsg)(client, "amazeful", "b34ccfc7-4977-403a-8a94-33c6bac34fb8");
            const response = "@msg-id=no_permission :tmi.twitch.tv NOTICE #amazeful " +
                ":You don't have permission to perform that action.";
            emitAndEnd(response);
            await (0, helpers_spec_1.assertErrorChain)([promise, clientError], deleteMsg_1.MessageDeleteError, "Failed to delete b34ccfc7-4977-403a-8a94-33c6bac34fb8 in #amazeful: Bad response message: " +
                response, errors_1.MessageError, "Bad response message: " + response);
        });
    });
});
//# sourceMappingURL=deleteMsg.spec.js.map