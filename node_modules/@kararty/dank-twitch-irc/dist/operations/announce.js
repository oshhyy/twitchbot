"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.announce = exports.AnnouncementError = void 0;
const usernotice_1 = require("../message/twitch-types/usernotice");
const await_response_1 = require("../await/await-response");
const conditions_1 = require("../await/conditions");
const errors_1 = require("../client/errors");
const privmsg_1 = require("./privmsg");
class AnnouncementError extends errors_1.MessageError {
    channelName;
    failedMessage;
    constructor(channelName, failedMessage, message, cause) {
        super(message, cause);
        this.channelName = channelName;
        this.failedMessage = failedMessage;
    }
}
exports.AnnouncementError = AnnouncementError;
const failureNoticeIDs = ["no_permission", "usage_announce"];
async function announce(conn, channelName, messageText) {
    const cmd = `/announce ${messageText}`;
    await (0, privmsg_1.sendPrivmsg)(conn, channelName, cmd);
    return (await (0, await_response_1.awaitResponse)(conn, {
        success: (msg) => msg instanceof usernotice_1.UsernoticeMessage &&
            msg.channelName === channelName &&
            msg.isAnnouncement(),
        failure: (0, conditions_1.matchingNotice)(channelName, failureNoticeIDs),
        errorType: (msg, cause) => new AnnouncementError(channelName, messageText, msg, cause),
        errorMessage: `Failed to announce [#${channelName}]: ${messageText}`,
    }));
}
exports.announce = announce;
//# sourceMappingURL=announce.js.map